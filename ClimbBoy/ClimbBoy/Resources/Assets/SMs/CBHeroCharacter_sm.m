/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CBHeroCharacter.sm
 */


//
//CaveMan FSM
//


#import "CBHeroCharacter.h"
#import "CBHeroCharacter_sm.h"
// Class declarations.
@implementation HeroMap
    static HeroMap_Standing *gHeroMap_Standing = nil;
    static HeroMap_Running *gHeroMap_Running = nil;
    static HeroMap_Jumping *gHeroMap_Jumping = nil;
    static HeroMap_Falling *gHeroMap_Falling = nil;
    static HeroMap_Climbing *gHeroMap_Climbing = nil;
    static HeroMap_Dying *gHeroMap_Dying = nil;

+ (HeroMap_Standing*)Standing;
{
    if (!gHeroMap_Standing)
    {
        gHeroMap_Standing = [[HeroMap_Standing alloc] initWithName:@"HeroMap::Standing" stateId:0];
    }
    return gHeroMap_Standing;
}

+ (HeroMap_Running*)Running;
{
    if (!gHeroMap_Running)
    {
        gHeroMap_Running = [[HeroMap_Running alloc] initWithName:@"HeroMap::Running" stateId:0];
    }
    return gHeroMap_Running;
}

+ (HeroMap_Jumping*)Jumping;
{
    if (!gHeroMap_Jumping)
    {
        gHeroMap_Jumping = [[HeroMap_Jumping alloc] initWithName:@"HeroMap::Jumping" stateId:0];
    }
    return gHeroMap_Jumping;
}

+ (HeroMap_Falling*)Falling;
{
    if (!gHeroMap_Falling)
    {
        gHeroMap_Falling = [[HeroMap_Falling alloc] initWithName:@"HeroMap::Falling" stateId:0];
    }
    return gHeroMap_Falling;
}

+ (HeroMap_Climbing*)Climbing;
{
    if (!gHeroMap_Climbing)
    {
        gHeroMap_Climbing = [[HeroMap_Climbing alloc] initWithName:@"HeroMap::Climbing" stateId:0];
    }
    return gHeroMap_Climbing;
}

+ (HeroMap_Dying*)Dying;
{
    if (!gHeroMap_Dying)
    {
        gHeroMap_Dying = [[HeroMap_Dying alloc] initWithName:@"HeroMap::Dying" stateId:0];
    }
    return gHeroMap_Dying;
}

+ (void) cleanupStates
{
    [gHeroMap_Standing S_RELEASE]; gHeroMap_Standing = nil;
    [gHeroMap_Running S_RELEASE]; gHeroMap_Running = nil;
    [gHeroMap_Jumping S_RELEASE]; gHeroMap_Jumping = nil;
    [gHeroMap_Falling S_RELEASE]; gHeroMap_Falling = nil;
    [gHeroMap_Climbing S_RELEASE]; gHeroMap_Climbing = nil;
    [gHeroMap_Dying S_RELEASE]; gHeroMap_Dying = nil;
}
@end

@implementation CBHeroCharacterState
- (void)Entry:(CBHeroCharacterContext*)context
{
}
- (void)Exit:(CBHeroCharacterContext*)context
{
}
- (void)toClimb:(CBHeroCharacterContext*)context;
{
    [self Default:context];
}
- (void)toDie:(CBHeroCharacterContext*)context;
{
    [self Default:context];
}
- (void)toFall:(CBHeroCharacterContext*)context;
{
    [self Default:context];
}
- (void)toJump:(CBHeroCharacterContext*)context;
{
    [self Default:context];
}
- (void)toRun:(CBHeroCharacterContext*)context;
{
    [self Default:context];
}
- (void)toStand:(CBHeroCharacterContext*)context;
{
    [self Default:context];
}
- (void)update:(CBHeroCharacterContext*)context :(NSTimeInterval)delta;
{
    [self Default:context];
}

- (void)Default:(CBHeroCharacterContext*)context;
{
    NSAssert( NO, @"Default transition" );
}
@end


@implementation HeroMap_Default

- (void)toStand:(CBHeroCharacterContext*)context;
{
}

- (void)toRun:(CBHeroCharacterContext*)context;
{
}

- (void)toJump:(CBHeroCharacterContext*)context;
{
}

- (void)toFall:(CBHeroCharacterContext*)context;
{
}

- (void)toClimb:(CBHeroCharacterContext*)context;
{
}

- (void)toDie:(CBHeroCharacterContext*)context;
{
}

- (void)update:(CBHeroCharacterContext*)context :(NSTimeInterval)delta;
{
}
@end
@implementation HeroMap_Standing
- (void)Entry:(CBHeroCharacterContext*)context;

{
    CBHeroCharacter *ctxt = [context owner];

    [ctxt runAnimation:CBAnimationStateIdle];
}

- (void)toJump:(CBHeroCharacterContext*)context;
{
    CBHeroCharacter *ctxt = [context owner];
    if (!ctxt.isTouchTop)
    {
        [[context state] Exit:context];
        // No actions.
        [context setState:[HeroMap Jumping]];
        [[context state] Entry:context];
    }
    else
    {
         [super toJump:context];
    }
}

- (void)toRun:(CBHeroCharacterContext*)context;
{
    CBHeroCharacter *ctxt = [context owner];
    [[context state] Exit:context];
    [context clearState];
    [ctxt startRun];
    [context setState:[HeroMap Running]];
    [[context state] Entry:context];
}
@end

@implementation HeroMap_Running
- (void)Entry:(CBHeroCharacterContext*)context;

{
    CBHeroCharacter *ctxt = [context owner];

    [ctxt runAnimation:CBAnimationStateRun];
}

- (void)toFall:(CBHeroCharacterContext*)context;
{
    [[context state] Exit:context];
    [context setState:[HeroMap Falling]];
    [[context state] Entry:context];
}

- (void)toJump:(CBHeroCharacterContext*)context;
{
    CBHeroCharacter *ctxt = [context owner];
    if (!ctxt.isTouchTop)
    {
        [[context state] Exit:context];
        // No actions.
        [context setState:[HeroMap Jumping]];
        [[context state] Entry:context];
    }
    else
    {
         [super toJump:context];
    }
}

- (void)toStand:(CBHeroCharacterContext*)context;
{
    [[context state] Exit:context];
    [context setState:[HeroMap Standing]];
    [[context state] Entry:context];
}

- (void)update:(CBHeroCharacterContext*)context :(NSTimeInterval)delta;
{
    CBHeroCharacter *ctxt = [context owner];
    CBHeroCharacterState* EndStateName = [context state];

    [context clearState];
    [ctxt updateRunning:delta];
    [context setState:EndStateName];
}
@end

@implementation HeroMap_Jumping
- (void)Entry:(CBHeroCharacterContext*)context;

{
    CBHeroCharacter *ctxt = [context owner];

    [ctxt runAnimation:CBAnimationStateJump];
    [ctxt startJumping];
}

- (void)toClimb:(CBHeroCharacterContext*)context;
{
    CBHeroCharacter *ctxt = [context owner];
    if (ctxt.isTouchSide)
    {
        [[context state] Exit:context];
        // No actions.
        [context setState:[HeroMap Climbing]];
        [[context state] Entry:context];
    }
    else
    {
         [super toClimb:context];
    }
}

- (void)toFall:(CBHeroCharacterContext*)context;
{
    [[context state] Exit:context];
    [context setState:[HeroMap Falling]];
    [[context state] Entry:context];
}

- (void)update:(CBHeroCharacterContext*)context :(NSTimeInterval)delta;
{
    CBHeroCharacter *ctxt = [context owner];
    CBHeroCharacterState* EndStateName = [context state];

    [context clearState];
    [ctxt updateJumping:delta];
    [context setState:EndStateName];
}
@end

@implementation HeroMap_Falling
- (void)Entry:(CBHeroCharacterContext*)context;

{
    CBHeroCharacter *ctxt = [context owner];

    [ctxt runAnimation:CBAnimationStateFall];
}

- (void)toClimb:(CBHeroCharacterContext*)context;
{
    CBHeroCharacter *ctxt = [context owner];
    if (ctxt.isTouchSide)
    {
        [[context state] Exit:context];
        // No actions.
        [context setState:[HeroMap Climbing]];
        [[context state] Entry:context];
    }
    else
    {
         [super toClimb:context];
    }
}

- (void)toStand:(CBHeroCharacterContext*)context;
{
    [[context state] Exit:context];
    [context setState:[HeroMap Standing]];
    [[context state] Entry:context];
}

- (void)update:(CBHeroCharacterContext*)context :(NSTimeInterval)delta;
{
    CBHeroCharacter *ctxt = [context owner];
    CBHeroCharacterState* EndStateName = [context state];

    [context clearState];
    [ctxt updateFalling:delta];
    [context setState:EndStateName];
}
@end

@implementation HeroMap_Climbing
- (void)Entry:(CBHeroCharacterContext*)context;

{
    CBHeroCharacter *ctxt = [context owner];

    [ctxt runAnimation:CBAnimationStateClimb];
}

- (void)toFall:(CBHeroCharacterContext*)context;
{
    [[context state] Exit:context];
    [context setState:[HeroMap Falling]];
    [[context state] Entry:context];
}

- (void)toJump:(CBHeroCharacterContext*)context;
{
    [[context state] Exit:context];
    [context setState:[HeroMap Jumping]];
    [[context state] Entry:context];
}

- (void)toStand:(CBHeroCharacterContext*)context;
{
    [[context state] Exit:context];
    [context setState:[HeroMap Standing]];
    [[context state] Entry:context];
}

- (void)update:(CBHeroCharacterContext*)context :(NSTimeInterval)delta;
{
    CBHeroCharacter *ctxt = [context owner];
    CBHeroCharacterState* EndStateName = [context state];

    [context clearState];
    [ctxt updateClimbing:delta];
    [context setState:EndStateName];
}
@end

@implementation HeroMap_Dying
- (void)Entry:(CBHeroCharacterContext*)context;

{
    CBHeroCharacter *ctxt = [context owner];

    [ctxt runAnimation:CBAnimationStateDeath];
}
@end

@implementation CBHeroCharacterContext
- (id)initWithOwner:(CBHeroCharacter*)owner;
{
    self = [super initWithState:[HeroMap Standing]];
    if (!self)
{
        return nil;
    }
    _owner = owner;
    return self;
}
- (id)initWithOwner:(CBHeroCharacter*)owner state:(SMCState*)aState;
{
    self = [super initWithState: aState];
    if (!self)
{
        return nil;
    }
    _owner = owner;
    return self;
}
- (void)dealloc
{
    [HeroMap cleanupStates];
    [super S_DEALLOC];
}
- (CBHeroCharacterState*)state;
{
    return (CBHeroCharacterState*)_state;
}
- (CBHeroCharacter*)owner;
{
    return _owner;
}
- (void)enterStartState;
{
    [[self state] Entry:self];
}

- (void)toClimb;
{
    [[self state] toClimb:self];
}

- (void)toDie;
{
    [[self state] toDie:self];
}

- (void)toFall;
{
    [[self state] toFall:self];
}

- (void)toJump;
{
    [[self state] toJump:self];
}

- (void)toRun;
{
    [[self state] toRun:self];
}

- (void)toStand;
{
    [[self state] toStand:self];
}

- (void)update:(NSTimeInterval)delta;
{
    [[self state] update:self :delta];
}
@end

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
